# The main entry point of the workflow
# snakemake --latency-wait 10 -j 10 -p -c "sbatch --job-name={params.jobName} --mem={params.mem} -c {threads} --time=360 -e sbatch/{params.jobName}.e -o sbatch/{params.jobName}.o"
shell.prefix("source ~/.bash_profile; ")
import os
import io 
import pandas as pd
import pathlib
from snakemake.exceptions import print_exception, WorkflowError

##### load config #####
configfile: "../config/16S-rRNA-seq.yaml"

# set variables
proj_name = config['proj_name']
raw_fq = config['raw_fq']
manifest = config['manifest']
SUF = config["suffix"]
R1_SUF = str(config["r1_suf"])
R2_SUF = str(config["r2_suf"])
if not os.path.exists(raw_fq):
    os.makedir(raw_fq)
    os.symlink(raw_fq, "raw_fq")

# Use glob statement to find all samples in 'raw_fq' directory
## Wildcard '{num}' must be equivalent to 'R1' or '1', meaning the read pair designation.
SAMPLE_LIST, NUMS = glob_wildcards("raw_fq/{sample}_{num}" + SUF)
# Unique the output variables from glob_wildcards
SAMPLE_SET = set(SAMPLE_LIST)
SET_NUMS = set(NUMS)

# Uncomment to diagnose if snakemake is reading in wildcard variables properly
# print(SAMPLE_SET)
# print(SET_NUMS)
# print(SUF)
# print(R1_SUF)

##### target rules #####
rule all:
    input:
        "raw_fq/Kelly_AdultCDI_2020_metadata.csv",
        # fastqc output before trimming
        raw_html = expand("../results/fastqc/{sample}_{num}_fastqc.html", sample=SAMPLE_SET, num=SET_NUMS),
        raw_zip = expand("../results/fastqc/{sample}_{num}_fastqc.zip", sample=SAMPLE_SET, num=SET_NUMS),
        raw_multi_html = "../results/raw_multi_fastqc/multiqc.html",

        # Trimmed data output
        trimmedData = expand("../results/trimmed/{sample}_{num}_trim.fastq.gz", sample=SAMPLE_SET, num=SET_NUMS), 
        trim_html = expand("../results/fastqc_trim/{sample}_{num}_trim_fastqc.html", sample=SAMPLE_SET, num=SET_NUMS),
        trim_zip = expand("../results/fastqc_trim/{sample}_{num}_trim_fastqc.zip", sample=SAMPLE_SET, num=SET_NUMS),
        trim_multi_html = "../results/trim_multi_fastqc/multiqc.html",

        # QIIME2 outputs
        q2_import = "../results/qiime2/" + proj_name + "-PE-demux.qza",
        q2_primerRM = "../results/qiime2/" + proj_name + "-PE-demux-noprimer.qza",
        # vizualization stats
        raw = "../results/qiime2/" + proj_name + "-PE-demux.qzv",
        primer = "../results/qiime2/" + proj_name + "-PE-demux-noprimer.qzv",

        # ASV outputs by Dada2:
        table = "../results/qiime2/asv/dada2/" + proj_name + "-asv-table.qza",
        seq = "../results/qiime2/asv/dada2/" + proj_name + "-rep-seqs.qza",
        stats = "../results/qiime2/asv/dada2/" + proj_name + "-stats-dada2.qza",
        stats_viz = "../results/qiime2/asv/dada2/" + proj_name + "-stats-dada2.qzv",
        table_viz = "../results/qiime2/asv/dada2/" + proj_name + "-asv-table.qzv",
        seq_viz = "../results/qiime2/asv/dada2/" + proj_name + "-rep-seqs.qzv",

        # filter samples
        table_cdi_pos = "../results/qiime2/asv/dada2/" + proj_name + "-asv-table_cdi_pos.qza",
        table_cdi_pos_viz = "../results/qiime2/asv/dada2/" + proj_name + "-asv-table_cdi_pos.qzv",
        seq_cdi_pos = "../results/qiime2/asv/dada2/" + proj_name + "-rep-seqs_cdi_pos.qza",
        seq_cdi_pos_viz = "../results/qiime2/asv/dada2/" + proj_name + "-rep-seqs_cdi_pos.qzv",

        # phylogeny outputs
        alignment = "../results/qiime2/asv/phylogeny/" + proj_name + "-aligned-rep-seqs.qza",
        masked_alignment = "../results/qiime2/asv/phylogeny/" + proj_name + "-masked_aligned-rep-seqs.qza",
        unrooted_tree = "../results/qiime2/asv/phylogeny/" + proj_name + "-unrooted_tree.qza",
        rooted_tree = "../results/qiime2/asv/phylogeny/" + proj_name + "-rooted_tree.qza",

        # diversity outputs:
        faith_pd_vector = "../results/qiime2/asv/diversity/core-metrics-results/" + proj_name + "-faith-pd-vector.qza",
        faith_pd_group_significance = "../results/qiime2/asv/diversity/core-metrics-results/" + proj_name + "-faith-pd-group-significance.qzv",
        unweighted_unifrac_recurrence_significance = "../results/qiime2/asv/diversity/core-metrics-results/" + proj_name  + "-unweighted-unifrac-recurrence-significance.qzv",

        # taxonomy
        taxonomy = "../results/qiime2/asv/taxonomy/" + proj_name + "-taxonomy.qza",
        taxonomy_viz = "../results/qiime2/asv/taxonomy/" + proj_name + "-taxonomy.qzv",
        taxa_barplot_viz = "../results/qiime2/asv/taxonomy/" + proj_name + "-taxa_barplot.qzv"


##### setup report #####
report: "report/workflow.rst"

##### load rules ####
include: "rules/download.smk"
include: "rules/qc_trim_qc.smk"
include: "rules/qiime2_import.smk"
include: "rules/rm_primers.smk"
include: "rules/qiime2_summarize.smk"
include: "rules/dada2_denoise.smk"
include: "rules/phylogeny.smk"
include: "rules/sample_filter.smk"
include: "rules/taxonomy.smk"
include: "rules/diversity.smk"
